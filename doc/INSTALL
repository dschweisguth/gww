This document describes how to install GWW on a Mac (OS 10.6, for development,
using webrick) or Linux server (CentOS 5.4, for production, using Apache httpd
and Phusion Passenger). It doesn't cover some things that Dave thinks are
obvious; please fill gaps as you encounter them.

Install and start mysql
-----------------------

Mac
    If you don't already have it, install MacPorts from www.macports.org
    > sudo port install mysql5-server
    > sudo port load mysql5-server # as directed by the previous command
    > sudo -u _mysql mysql_install_db5
    > /opt/local/lib/mysql5/bin/mysql_secure_installation # as directed
    > ln -s /opt/local/var/run/mysql5/mysqld.sock /tmp
Linux
    TODO

Install ruby and friends
------------------------

GWW currently requires ruby 1.8.7 (the current version of 1.9 is too new),
rubygems and the gems listed below. The specific versions are not necessarily
required, but they're what I have.

Install ruby
    Mac
	> sudo port install ruby
	> ruby --version
	ruby 1.8.7 (2010-12-23 patchlevel 330) [i686-darwin10]
    Linux
	Get source from http://www.ruby-lang.org/en/ and follow instructions
	> ruby --version
	ruby 1.8.7 (2010-12-23 patchlevel 330) [x86_64-linux]

Install gem
    Mac
	> sudo port install rb-rubygems
	> sudo gem update --system
        > gem --version
        1.4.2
    Linux
	Get source from http://gems.rubyforge.org/ and follow instructions.
	> sudo gem update --system
	> gem --version
	1.4.2

Install bundler
    > sudo gem install bundler
    > gem list
    bundler (1.0.7)
    rubygems-update (1.4.2)

Get and configure GWW
---------------------

Get the source: Either
    > git clone git@github.com:dschweisguth/gww.git, or
    Browse http://github.com/dschweisguth/gww, click "Download Source", pick a
        format, download it and unpack it
Install gems
    Mac
	> sudo bundle install --without production
	> gem list
        actionmailer (2.3.10)
        actionpack (2.3.10)
        activerecord (2.3.10)
        activeresource (2.3.10)
        activesupport (2.3.10)
        bundler (1.0.7)
        mysql2 (0.2.6)
        rack (1.1.0)
        rails (2.3.10)
        rake (0.8.7)
        rubygems-update (1.4.2)
        will_paginate (2.3.15)
        xml-simple (1.0.12)
    Linux
	> bundle install --deployment --without test
	> bundle list
	Gems included by the bundle:
	  * actionmailer (2.3.10)
	  * actionpack (2.3.10)
	  * activerecord (2.3.10)
	  * activeresource (2.3.10)
	  * activesupport (2.3.10)
	  * bundler (1.0.7)
	  * fastthread (1.0.7)
	  * mysql2 (0.2.6)
	  * passenger (2.2.15)
	  * rack (1.1.0)
	  * rails (2.3.10)
	  * rake (0.8.7)
	  * will_paginate (2.3.15)
	  * xml-simple (1.0.12)
        (Note that the output of 'gem list' did not change.)
Configure
    Configure database credentials
	> cp config/database{_template,}.yml
	Edit and fill in your database username and password
    Configure Flickr credentials
	> cp config/flickr_credentials{_template,}.yml
	Construct a Flickr API secret, key and auth token manually per the
	    API documentation
	Edit and fill in your secret, api_key and auth_token

Create database user and databases
----------------------------------

mysql> grant usage on *.* to gww@localhost identified by '(the password)';
Create dev database
    mysql> grant all privileges on gww_dev.* to gww@localhost;
    > rake db:create
    > gzcat gww_production-######-##:##.sql.gz | mysql -ugww -p gww_dev
Create production database
    mysql> grant all privileges on gww_production.* to gww@localhost;
    > rake RAILS_ENV=production db:create
    > gzcat gww_production-######-##:##.sql.gz | mysql -ugww -p gww_production
Create test database
    mysql> grant all privileges on gww_test.* to gww@localhost;
    > rake RAILS_ENV=test db:create
    > rake db:test:clone_structure

Test GWW
--------

> rake test

Install Phusion Passenger and configure httpd (for Linux production only)
-------------------------------------------------------------------------

Install Phusion Passenger
    > bundle exec passenger-install-apache2-module # and follow instructions
    In addition to editing httpd.conf as instructed by passenger, add the
    following option to the appropriate place in your httpd configuration to
    enable GWW's .htaccess: AllowOverride AuthConfig FileInfo

Configure basic HTTP authentication
    Create a username and password per
        http://httpd.apache.org/docs/2.2/howto/auth.html. Be sure not to put
	the htpasswd file in a directory from which httpd serves files, such as
	GWW's public directory.
    > cp public/admin/.htaccess{_template,}
    Edit and fill in
    - the full path to the htpasswd file that you just created
    - the username

Start GWW
---------

Mac
    > script/server
    Browse http://localhost:3000/
Linux
    > sudo apachectl restart
    Browse http://your-production-server/
