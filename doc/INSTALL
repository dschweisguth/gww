Install on a Mac, for development
=================================

Install and start mysql
-----------------------

If you don't already have it, install MacPorts from www.macports.org
> sudo port install mysql56-server
# and follow the instructions in its output
> /opt/local/lib/mysql56/bin/mysql_secure_installation
> ln -s /opt/local/var/run/mysql56/mysqld.sock /tmp/mysql.sock # for ogr2ogr
Create the following file:
> cat /opt/local/etc/mysql56/my.cnf 
[mysqld]
init-connect='SET NAMES utf8mb4'
init_connect='SET collation_connection = utf8mb4_unicode_ci'
character-set-server=utf8mb4
collation-server=utf8mb4_unicode_ci
skip-character-set-client-handshake
> sudo port load mysql56-server
> sudo port select mysql mysql56
  If this step fails due to the absence of a manpage, appease it by creating a zero-length file.

Install required binaries
-------------------------

> port install readline # irb needs current readline to save history across sessions

Install ruby and friends
------------------------

GWW currently requires the approximate Ruby version and the gems listed below. The specific versions are not necessarily required, but they're what GWW uses at this writing.

Install rbenv per https://github.com/sstephenson/rbenv
Install ruby-build per https://github.com/sstephenson/ruby-build
> RUBY_CONFIGURE_OPTS=--with-readline-dir=/opt/local rbenv install 2.6.7
> rbenv global 2.6.7
> gem update --system
> gem --version
3.2.16
> gem install bundler --version 1.17.3
> gem list bundler
bundler (default: 2.2.16, 1.17.3)

Get and configure GWW
---------------------

Get the source: Either
- > git clone git@github.com:dschweisguth/gww.git, or
- Browse https://github.com/dschweisguth/gww, click "Download Source", pick a format, download it and unpack it
Install gems:
> bundle config --local without production
> bundle
Configure:
  Configure database credentials
    > cp config/database{_template,}.yml
    Edit, change usernames if you want different ones, and choose passwords
  Configure Flickr credentials
    Construct a Flickr API secret, key, oauth token and oauth token secret manually per the API documentation
    > cp config/flickr_credentials{_template,}.yml
    Edit and fill in your secret, api_key, oauth_token and oauth_token_secret
  Configure Google Maps credentials
    Make a Google Maps browser key per https://developers.google.com/maps/documentation/javascript/get-api-key#key
    > cp config/google_maps{_template}.yml
    Edit and fill in your key

Create database users and databases
-----------------------------------

Create dev user and database
    mysql> create user gww_dev identified by 'gww_dev';
    mysql> grant all on gww_dev.* to gww_dev@localhost;
    > bundle exec rake db:create # TODO check that this creates a utf8mb4 database
    > gzcat gww_production-######-##:##.sql.gz | mysql -ugww_dev -p gww_dev
Create test database
    mysql> grant all on gww_test.* to gww_dev@localhost;
    > bundle exec rake RAILS_ENV=test db:setup

Test GWW
--------

> bundle exec rake RAILS_ENV=test

Start GWW
---------

> rails s
Browse http://localhost:3000/

Update San Francisco GIS data
-----------------------------

SFGIS data from 2011 is in the current production database, so if you restored from a production backup you have it already. If you want to update to a newer version, do the following:

Get the GDAL 1.8 Complete installer from http://www.kyngchaos.com/software/frameworks and run it.
> mkdir sfgis
> cd sfgis
> wget http://gispub02.sfgov.org/website/sfshare/catalog/stclines.zip http://gispub02.sfgov.org/website/sfshare/catalog/stintersections.zip
> mkdir stclines stintersections
> cd stclines
> unzip ../stclines.zip
> cd ../stintersections
> unzip ../stintersections.zip
> cd ..
> script/load_sfgis . gww_dev gww_dev gww_dev


Install on Linux, for production
================================

This incompletely documents the installation of GWW on the CentOS server on which it ran from 2009 to 2021.

Install and start mysql
-----------------------

TODO
Edit /etc/my.cnf (which on Linux, unlike on Mac OS, will exist on a new installation) and add the settings shown in the Mac instructions in the appropriate section.

Install required binaries
-------------------------

TODO

Install ruby and friends
------------------------

Like installing on Mac, but RUBY_CONFIGURE_OPTS isn't needed.

Get and configure GWW
---------------------

Same as on Mac, but
- Configure bundler thus:
  > bundle config --local deployment true
  > bundle config --local frozen true
  > bundle config --local without development test
  > bundle
- Flickr and Google Maps credentials can be the same in production as in development. Database credentials will probably be different.

Create database users and databases
-----------------------------------

mysql> create user gww_prod identified by 'gww_prod';
mysql> grant all on gww_prod.* to gww_prod;
mysql> grant process on *.* to gww_prod; # needed for mysqldump
> bundle exec rake RAILS_ENV=production db:create # TODO check that this creates a utf8mb4 database
> gzcat gww_prod-######-##:##.sql.gz | mysql -ugww_prod -pgww_prod gww_prod

Install Phusion Passenger and configure httpd
---------------------------------------------

Install Phusion Passenger
    > bundle exec passenger-install-apache2-module # and follow instructions
    In addition to editing httpd.conf as instructed by passenger,
    - add the following option to the appropriate place in your httpd
      configuration to enable GWW's .htaccess:
      AllowOverride AuthConfig FileInfo
    - enable HTTPS access to GWW's public directory. It is difficult to document that fully in a
      way that will work for everyone, so ask.

Put the server-up .htaccess in place
    > script/up

Configure basic HTTP authentication
    Create a username and password per
        http://httpd.apache.org/docs/2.2/howto/auth.html. Be sure not to put
	    the htpasswd file in a directory from which httpd serves files,
	    such as GWW's public directory.
    > cp public/admin/.htaccess{_template,}
    Edit and fill in
    - the full path to the htpasswd file that you just created
    - the username

Start GWW
---------

> sudo apachectl restart
Browse http://your-production-server/

Update GWW
----------

Add something like the following to your crontab:
30 17     * * *	/home/you/lib/gww/script/suppress_output_on_success /home/you/lib/gww/script/log_in_and_run FlickrUpdateJob::Job.run
 0 21,0,3 * * *	/home/you/lib/gww/script/suppress_output_on_success /home/you/lib/gww/script/log_in_and_run PrecalculatorJob::Job.run

Update San Francisco GIS data
-----------------------------

Install GDAL:
> wget http://download.osgeo.org/proj/proj-4.7.0.tar.gz
> tar xf proj-4.7.0.tar.gz
> cd proj-4.7.0
> ./configure
> make
> make install
> wget http://download.osgeo.org/gdal/gdal-1.8.0.tar.gz
> tar xf gdal-1.8.0.tar.gz
> cd gdal-1.8.0
> ./configure --with-mysql
> make
> make install
Proceed as on Mac, or load the data in development, dump it, and restore it into the production database.


Install on AWS, for production
==============================

This documents, still incompletely but much less so, the installation of GWW onthe AWS EC2 instance to which it moved in 2021.

Create and configure instance:
Create EC2 instance gww
Create Elastic IP and associate
Create A record for gww.schweisguth.org resolving to Elastic IP
TODO move to guesswheresf.org
In this repo:
Add .gitignored files to install. See above for how to construct them.
$ script/push-install-to-ec2-instance
$ ssh gww sudo reboot # to pick up time zone change

Install GWW and dependencies:
# yum install -y git
# /usr/local/lib/install-mysql-client
$ ~/lib/install-ruby
$ exec bash -l # to pick up the previous change
lib $ git clone git@github.com:dschweisguth/gww.git
lib/gww $ bundle config --local deployment true
lib/gww $ bundle config --local frozen true
lib/gww $ bundle config --local without development test
lib/gww $ bundle
lib/gww $ cp ../gww-config/config/* config
lib/gww $ cp ../gww-config/public/admin/.htaccess public/admin
# yum -y install httpd
lib/gww $ bundle exec passenger-install-apache2-module
Update install/root/etc/httpd/conf.modules.d/20-passenger.conf to match the output of the previous command, script/push-install-to-ec2-instance

Create database:
Create RDS parameter group mysql57-utf8mb4 with the following parameters
  init_connect				SET NAMES utf8mb4; SET collation_connection = utf8mb4_unicode_ci
  character_set_server	    	  	utf8mb4
  collation_server			utf8mb4_unicode_ci
  skip-character-set-client-handshake	1
Create RDS instance gww-database
  Use the parameter group just created
Edit gww-database security group
Remove inbound rule allowing mysql connection from browser IP range
Add inbound rule allowing mysql connection from gww internal IP range
  TODO use a role which identifies the EC2 instance rather than the CIDR block containing its IP
Edit lib/create-gww-database.sql to update gww_prod's password
$ mysql -hgww-database.c6n3e1wakxyr.us-west-2.rds.amazonaws.com -uroot -p < lib/create-gww-database.sql
  TODO use rake?
Copy backup to instance
$ zcat ~/gww_prod_utf8-210423-04\:00\:01.sql.gz | mysql -hgww-database.c6n3e1wakxyr.us-west-2.rds.amazonaws.com -ugww_prod -p gww_prod

# systemctl start httpd
# systemctl enable httpd
$ crontab lib/crontab

Configure HTTPS with Let's Encrypt (per https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SSL-on-amazon-linux-2.html):
# yum install -y mod_ssl
# wget -r --no-parent -A 'epel-release-*.rpm' https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/
# rpm -Uvh dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-*.rpm
# rm -rf dl.fedoraproject.org
# yum-config-manager --enable epel*
# yum install -y certbot python2-certbot-apache
In httpd.conf, after "Listen 80", add explicit server names:
<VirtualHost *:80>
    DocumentRoot "/var/www/html"
    ServerName "guesswheresf.org"
    ServerAlias "www.guesswheresf.org"
</VirtualHost>
# systemctl restart httpd
# certbot
Certify guesswheresf.org and www.guesswheresf.org (the latter just for redirection)
Merge /etc/httpd/conf/httpd-le-ssl.conf (just created by certbot) into /etc/httpd/conf.d/passenger.conf. Configure port 80 to do nothing but redirect to HTTPS. Configure port 443 to serve passenger and redirect from www to the apex. Remove the last line (just added by certbot) of /etc/httpd/conf/httpd.conf, which includes /etc/httpd/conf/httpd-le-ssl.conf. (httpd.conf is now unmodified again.)
# systemctl restart httpd
In DNS, replace forwarding from www to the apex (which now causes a certificate error) with a CNAME that does the same.
Copy passenger.conf back to install
# crontab ~/lib/crontab
Test SSL configuration at https://www.ssllabs.com/ssltest/. If it is graded A, no further adjustment is necessary.
