#!/usr/bin/env ruby

# Backs up this app's production database to an S3 bucket configured to be a
# static web site, visible at
# http://guesswherewatcher-backups.s3-website-us-west-2.amazonaws.com/

require 'date'
require 'fileutils'
require 'open3'
require 'yaml'

class BackUp
  BUCKET = 's3://guesswherewatcher-backups'.freeze

  def run
    back_up
    update_index_page
  end

  private

  def back_up
    database = database_property 'database'
    file = "#{database}-#{DateTime.now.strftime '%y%m%d-%H:%M:%S'}.sql.gz"
    statuses = Open3.pipeline(
      [
        { 'MYSQL_PWD' => database_property('password') },
        # mysqldump uses UTF-8 despite server settings unless told otherwise
        "mysqldump --default-character-set=utf8mb4 " +
          "-h#{database_property 'host'} -u#{database_property 'username'} " +
          "#{database}"
      ],
      "gzip",
      "aws s3 cp - #{BUCKET}/#{file} --storage-class STANDARD_IA"
    )
    failure = statuses.find { |status| !status.success? }
    if failure
      warn "Couldn't back up. " +
        "Command #{failure[1]} of 0-#{statuses.count - 1} failed: " +
        "#{failure[0].inspect}"
      exit 1
    end
  end

  def database_property(name)
    @database_properties ||=
      YAML.safe_load(IO.read("#{__dir__}/../config/database.yml"))['production']
    @database_properties[name]
  end

  def update_index_page
    result = system "#{__dir__}/update-backup-index-page"
    if !result
      warn "Couldn't run update-backup-index-page: #{$?}"
      exit 1
    end
  end

end
BackUp.new.run
